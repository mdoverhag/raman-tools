name: Build and Release

on:
  push:
    branches: [master]
    tags:
      - "v*"
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install frontend dependencies
        run: bun install

      - name: Run frontend type checks
        run: bun run check

      - name: Run Rust tests
        working-directory: src-tauri
        run: cargo test

      - name: Check Rust formatting
        working-directory: src-tauri
        run: cargo fmt -- --check

      - name: Run Rust clippy
        working-directory: src-tauri
        run: cargo clippy -- -D warnings

  build:
    needs: test
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install frontend dependencies
        run: bun install

      - name: Import macOS certificate
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain
          security import certificate.p12 -k temp.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions temp.keychain

      - name: Build Tauri app
        run: bun run tauri build --target ${{ matrix.target }}

      - name: Sign macOS app
        if: matrix.os == 'macos-latest'
        env:
          APPLE_SIGNING_ID: ${{ secrets.APPLE_SIGNING_ID }}
        run: |
          # Sign the app bundle
          codesign --deep --force --verify --verbose --timestamp --options runtime --sign "$APPLE_SIGNING_ID" "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Raman Tools.app"

          # Verify the signature
          codesign --verify --verbose "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Raman Tools.app"

      - name: Notarize macOS app
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create a zip of the app for notarization
          ditto -c -k --keepParent "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Raman Tools.app" "Raman Tools.zip"

          # Submit for notarization
          xcrun notarytool submit "Raman Tools.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait

          # Staple the notarization ticket to the app
          xcrun stapler staple "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Raman Tools.app"

          # The DMG will be created with the notarized app inside

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: raman-tools-${{ matrix.name }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: raman-tools-${{ matrix.name }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.msi
            artifacts/**/*.dmg
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
